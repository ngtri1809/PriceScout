openapi: 3.1.0
info:
  title: PriceScout API
  description: Intelligent price tracking and prediction platform
  version: 1.0.0
  contact:
    name: PriceScout Team
    email: support@pricescout.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8080/api
    description: Development server
  - url: https://api.pricescout.com/api
    description: Production server

security:
  - BearerAuth: []

paths:
  /health:
    get:
      summary: Health check
      description: Check if the API is running
      security: []
      responses:
        '200':
          description: API is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  timestamp:
                    type: string
                    format: date-time
                  version:
                    type: string

  /auth/register:
    post:
      summary: Register a new user
      description: Create a new user account
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 8
                name:
                  type: string
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '409':
          $ref: '#/components/responses/ConflictError'

  /auth/login:
    post:
      summary: Login user
      description: Authenticate user and return access token
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /auth/me:
    get:
      summary: Get current user
      description: Get information about the authenticated user
      responses:
        '200':
          description: User information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    delete:
      summary: Delete current user
      description: Delete the authenticated user's account
      responses:
        '200':
          description: Account deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /items/search:
    get:
      summary: Search items
      description: Search for items by name, description, SKU, or category
      security: []
      parameters:
        - name: q
          in: query
          required: true
          description: Search query
          schema:
            type: string
        - name: limit
          in: query
          description: Number of results to return
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: offset
          in: query
          description: Number of results to skip
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /items/{id}:
    get:
      summary: Get item by ID
      description: Get detailed information about a specific item
      security: []
      parameters:
        - name: id
          in: path
          required: true
          description: Item ID
          schema:
            type: string
      responses:
        '200':
          description: Item information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /items/{id}/prices:
    get:
      summary: Get item price history
      description: Get historical price data for an item
      security: []
      parameters:
        - name: id
          in: path
          required: true
          description: Item ID
          schema:
            type: string
        - name: days
          in: query
          description: Number of days of history to retrieve
          schema:
            type: integer
            minimum: 1
            maximum: 365
            default: 30
      responses:
        '200':
          description: Price history
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /compare:
    get:
      summary: Compare prices
      description: Compare prices across different marketplaces for an item
      security: []
      parameters:
        - name: sku
          in: query
          required: true
          description: Item SKU
          schema:
            type: string
      responses:
        '200':
          description: Price comparison results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /watchlist:
    get:
      summary: Get user's watchlist
      description: Get all items in the user's watchlist
      responses:
        '200':
          description: Watchlist items
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    post:
      summary: Add item to watchlist
      description: Add an item to the user's watchlist
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - itemId
              properties:
                itemId:
                  type: string
      responses:
        '201':
          description: Item added to watchlist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '409':
          $ref: '#/components/responses/ConflictError'

  /watchlist/{itemId}:
    delete:
      summary: Remove item from watchlist
      description: Remove an item from the user's watchlist
      parameters:
        - name: itemId
          in: path
          required: true
          description: Item ID
          schema:
            type: string
      responses:
        '200':
          description: Item removed from watchlist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /predict:
    get:
      summary: Predict price trends
      description: Get AI-powered price predictions for an item
      security: []
      parameters:
        - name: itemId
          in: query
          required: true
          description: Item ID
          schema:
            type: string
        - name: h
          in: query
          description: Prediction horizon in days
          schema:
            type: integer
            minimum: 1
            maximum: 90
            default: 14
      responses:
        '200':
          description: Price predictions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /notifications/preferences:
    get:
      summary: Get notification preferences
      description: Get user's notification preferences
      responses:
        '200':
          description: Notification preferences
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    put:
      summary: Update notification preferences
      description: Update user's notification preferences
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - emailOptIn
              properties:
                emailOptIn:
                  type: boolean
      responses:
        '200':
          description: Preferences updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
          format: email
        name:
          type: string
        createdAt:
          type: string
          format: date-time

    Item:
      type: object
      properties:
        id:
          type: string
        sku:
          type: string
        name:
          type: string
        description:
          type: string
        category:
          type: string
        createdAt:
          type: string
          format: date-time

    PriceData:
      type: object
      properties:
        id:
          type: string
        itemId:
          type: string
        marketplaceId:
          type: string
        price:
          type: number
        shipping:
          type: number
        tax:
          type: number
        availability:
          type: boolean
        timestamp:
          type: string
          format: date-time

    PredictionResult:
      type: object
      properties:
        date:
          type: string
          format: date-time
        p10:
          type: number
        p50:
          type: number
        p90:
          type: number

    AuthResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: object
          properties:
            accessToken:
              type: string
            user:
              $ref: '#/components/schemas/User'

    ApiResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: object
        message:
          type: string
        error:
          type: string

    ApiError:
      type: object
      properties:
        type:
          type: string
        title:
          type: string
        status:
          type: integer
        detail:
          type: string
        instance:
          type: string

  responses:
    ValidationError:
      description: Validation error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
          example:
            type: 'https://tools.ietf.org/html/rfc7231#section-6.5.1'
            title: 'Validation Error'
            status: 400
            detail: 'Request validation failed'
            instance: '/api/auth/register'

    UnauthorizedError:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
          example:
            type: 'https://tools.ietf.org/html/rfc7231#section-6.5.3'
            title: 'Unauthorized'
            status: 401
            detail: 'Access token required'
            instance: '/api/watchlist'

    ForbiddenError:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
          example:
            type: 'https://tools.ietf.org/html/rfc7231#section-6.5.3'
            title: 'Forbidden'
            status: 403
            detail: 'Insufficient permissions'
            instance: '/api/admin/users'

    NotFoundError:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
          example:
            type: 'https://tools.ietf.org/html/rfc7231#section-6.5.4'
            title: 'Not Found'
            status: 404
            detail: 'Resource not found'
            instance: '/api/items/123'

    ConflictError:
      description: Conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
          example:
            type: 'https://tools.ietf.org/html/rfc7231#section-6.5.8'
            title: 'Conflict'
            status: 409
            detail: 'Resource already exists'
            instance: '/api/auth/register'

    RateLimitError:
      description: Rate limit exceeded
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
          example:
            type: 'https://tools.ietf.org/html/rfc7231#section-6.5.1'
            title: 'Too Many Requests'
            status: 429
            detail: 'Rate limit exceeded. Please try again later.'
            instance: '/api/items/search'

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
          example:
            type: 'https://tools.ietf.org/html/rfc7231#section-6.6.1'
            title: 'Internal Server Error'
            status: 500
            detail: 'An unexpected error occurred'
            instance: '/api/items/search'

